// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Artist {
  id             String    @id @default(cuid())
  username       String    @unique
  password       Password?
  email          String    @unique
  email_verified Boolean   @default(false)
  avatar         String?
  // 
  created_at     DateTime  @default(now())
  updated_at     DateTime  @updatedAt
  // 
  comments       Comment[]
  likes          Like[]
  artworks       Artwork[]
  roles          Role[]

  @@index([username])
}

model Artwork {
  id           String    @id @default(cuid())
  theme        String
  artworkImage String
  likesCount   Int       @default(0)
  // 
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  // 
  comments     Comment[]
  likes        Like[]
  artists      Artist[]
}

model Like {
  id        String  @id @default(cuid())
  // 
  artworkId String
  artwork   Artwork @relation(fields: [artworkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId  String
  artist    Artist  @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([artworkId])
  @@index([artistId])
}

model Comment {
  id         String   @id @default(cuid())
  content    String   @default("")
  // 
  artworkId  String
  artwork    Artwork  @relation(fields: [artworkId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId   String
  artist     Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // 
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([artworkId])
  @@index([artistId])
}

model Password {
  hash     String
  // 
  artistId String @unique
  user     Artist @relation(fields: [artistId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Permission {
  id          String   @id @default(cuid())
  action      String // CRUD
  entity      String // Art or artist
  access      String // own or any
  description String?  @default("")
  // 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  //
  roles       Role[]

  @@unique([action, access, entity])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?  @default("")
  // 
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  permissions Permission[]
  artists     Artist[]
}

model Verification {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  type      String
  target    String
  secret    String
  algorithm String
  digits    Int
  period    Int
  charSet   String
  expiresAt DateTime?

  @@unique([target, type])
}
